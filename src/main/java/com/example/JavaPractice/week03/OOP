** 현실 세계에서 어떠한 제품을 만들기 위해 부품들을 하나씩 조립해서
완성시키는 것처럼 소프트웨어 또한 필요한 부품들을 만들고 하나씩 조립해서
하나의 완성된 프로그램을 만들 수 있는데 이러한 기법을 ‘객체지향 프로그래밍’이라고 부름
- 소프트웨어에서의 부품을 ‘객체’라고 표현

- 객체란
    - 객체는 세상에 존재하는 물체를 뜻하며 식별이 가능한 것을 의미합니다.
        - 예를 들자면 물리적으로 존재하는 자동차, 도서관, 계산기를 객체라 볼 수 있습니다.
        - 강의, 배달 주문, 운동과 같은 개념적인 것 또한 식별이 가능하기 때문에 객체라 볼 수 있습니다.
    - 자동차를 기반으로 하여 객체에 대해 좀 더 자세하게 살펴보겠습니다.
    - 객체는 속성과 행위로 구성이 되었습니다.
        - 자동차의 속성과 행위를 표현해 보겠습니다.
            - 자동차는 회사, 모델, 색상, 가격, 속도 등의 속성을 가질 수 있습니다.
            - 자동차는 가속, 브레이크, 기어 변속, 조명, 경적 등의 행위를 가질 수 있습니다.
- 객체지향의 네 가지 특징
    - 캡슐화
        - 캡슐화란 속성(필드)와 행위(메서드)를 하나로 묶어 객체로 만든 후 실제 내부 구현 내용은 외부에서 알 수 없게 감추는 것을 의미합니다.
        - 외부 객체에서는 캡슐화된 객체의 내부 구조를 알 수 없기 때문에 노출시켜 준 필드 혹은 메서드를 통해 접근할 수 있습니다.
        - 필드와 메서드를 캡슐화하여 숨기는 이유는 외부 객체에서 해당 필드와 메서드를 잘못 사용하여 객체가 변화하지 않게 하는 데 있습니다.
        - Java에서는 캡슐화된 객체의 필드와 메서드를 노출시킬지 감출지 결정하기 위해 접근 제어자를 사용합니다.

    - 상속
        - 객체지향 프로그래밍에는 부모 객체와 자식 객체가 존재합니다.
        - 부모 객체는 가지고 있는 필드와 메서드를 자식 객체에 물려주어 자식 객체가 이를 사용할 수 있도록 만들 수 있습니다.
        - 상속을 하는 이유
              1. 각각의 객체들을 상속 관계로 묶음으로써 객체 간의 구조를 파악하기 쉬워집니다.
              2. 필드와 메서드를 변경하는 경우 부모 객체에 있는 것만 수정하게 되면 자식 객체 전부 반영이 되기 때문에 일관성을 유지하기 좋습니다.
              3. 자식 객체가 부모 객체의 필드와 메서드를 물려받아 사용할 수 있기 때문에 코드의 중복이 줄어들며 코드의 재사용성이 증가됩니다.

    - 다형성
        - 객체가 연산을 수행할 때 하나의 행위에 대해 각 객체가 가지고 있는 고유한 특성에 따라 다른 여러 가지 형태로 재구성되는 것을 의미합니다.
        - Car 클래스를 토대로 자동차 객체를 만들 때 A자동차 객체와 B자동차 객체의 경적 소리가 다르다면 ‘경적을 울리다’라는 행위 즉, horn(); 메서드의 구현을 다르게 재정의 하여 사용할 수 있습니다.

    - 추상화
        - 객체에서 공통된 부분들을 모아 상위 개념으로 새롭게 선언하는 것을 추상화라고 합니다.
        - 공통적이고 중요한 것들을 모아 객체를 모델링 합니다.
        - 현실 세계의 여러 종류의 자동차들이 공통적으로 가지고 있는 가속, 브레이크, 속도와 같은 것들을 모아 자동차라는 객체를 모델링 할 수 있습니다.

- 객체와 클래스
    - 객체를 생성하기 위해서 설계도가 필요합니다.
    - 현실 세계에서는 자동차를 만들기 위해 자동차 설계도를 토대로 자동차를 생산합니다.
    - 마찬가지로 소프트웨어에서도 객체를 만들기 위해서는 설계도에 해당하는 클래스가 필요합니다.
    - 이때 클래스를 토대로 생성된 객체를 해당 클래스의 ‘인스턴스’라고 부르며 이 과정을 ‘인스턴스화’라고 부릅니다.
    - 동일한 클래스로 여러 개의 인스턴스를 만들 수 있습니다.
    - 자동차 클래스를 통해 만들어진 하나의 자동차를 인스턴스라고 부르며 이러한 여러 개의 인스턴스들을 크게 통틀어서 자동차 객체라고 표현할 수 있습니다.

