- Lock
    - synchronized 블럭으로 동기화하면 자동적으로 Lock이 걸리고 풀리지만,
      같은 메서드 내에서만 Lock을 걸 수 있다는 제약이 있는데, 이런 제약을
      해결하기 위해 Lock 클래스를 사용함
    - ReentrantLock
        - 재진입 가능한 Lock, 가장 일반적인 배타 Lock
        - 특정 조건에서 Lock을 풀고, 나중에 다시 Lock을 얻어
          임계 영역으로 진입이 가능
    - ReentrantReadWriteLock
        - 읽기를 위한 Lock과 쓰기를 위한 Lock을 따로 제공
        - 읽기에는 공유적이고, 쓰기에는 베타적인 Lock
        - 읽기 Lock이 걸려있으면 다른 쓰레드들도 읽기 Lock을 중복으로 걸고
          읽기를 수행할 수 있음 (read-only)
        - 읽기 Lock이 걸려있는 상태에서 쓰기 Lock을 거는 것은 허용되지
          않음 (데이터 변경 방지)
    - StampedLock
        - ReentrantReadWriteLock에 낙관적인 Lock의 기능을 추가했음
            - 낙관적인 Lock : 데이터를 변경하기 전에 락을 걸지 않는 것
              낙관적인 락은 데이터 변경을 할 때 충돌이 일어날 가능성이 적은 상황에서 사용함
            - 낙관적인 락을 사용하면 읽기와 쓰기 작업 모두가 빠르게 처리됨
              쓰기 작업이 발생했을 때 데이터가 이미 변경된 경우 다시 읽기 작업을 수행하여
              새로운 값을 읽어들이고, 변경 작업을 다시 수행함
              이러한 방식으로 쓰기 작업이 빈번하지 않은 경우에는 낙관적인 락을 사용하여
              더 빠른 처리가 가능
        - 낙관적인 읽기 Lock은 쓰기 Lock에 의해 바로 해제 가능함
        - 무조건 읽기 Lock을 걸지 않고, 쓰기와 읽기가 충돌할 때만 쓰기 후 읽기 Lock을 검